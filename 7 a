{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMsKcS/IvAEK5nlhEs19hcz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z2o6WnSOu1ig","executionInfo":{"status":"ok","timestamp":1728216557479,"user_tz":240,"elapsed":8085,"user":{"displayName":"Alakir Meneses peres","userId":"09853550789562380167"}},"outputId":"fb6c0e55-ba43-43bb-9083-56d9e88196d0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting deap\n","  Downloading deap-1.4.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from deap) (1.26.4)\n","Downloading deap-1.4.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (135 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m135.4/135.4 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: deap\n","Successfully installed deap-1.4.1\n"]}],"source":["!pip install deap"]},{"cell_type":"code","source":["import random\n","from deap import base, creator, tools\n","\n","# Definir el tipo de problema y la función objetivo\n","creator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))  # Maximizar la función\n","creator.create(\"Individuo\", list, fitness=creator.FitnessMax)\n","\n","# Crear la población inicial\n","def crear_individuo():\n","    return [random.uniform(0, 2)]  # Generar un valor de x entre 0 y 2\n","\n","# Definir la función objetivo\n","def funcion_objetivo(individuo):\n","    x = individuo[0]\n","    if x < 0:\n","        return (-float('inf'),)  # Devolver un valor bajo si x es negativo\n","    try:\n","        resultado = x**(2*x) - 1  # Calcular f(x)\n","        return (resultado,)  # Retornar como tupla\n","    except Exception:\n","        return (-float('inf'),)  # Devolver un valor bajo si hay un error\n","\n","# Configurar el entorno de DEAP\n","toolbox = base.Toolbox()\n","toolbox.register(\"individuo\", tools.initIterate, creator.Individuo, crear_individuo)\n","toolbox.register(\"poblacion\", tools.initRepeat, list, toolbox.individuo)\n","toolbox.register(\"evaluar\", funcion_objetivo)\n","toolbox.register(\"mate\", tools.cxBlend, alpha=0.5)\n","toolbox.register(\"mutar\", tools.mutGaussian, mu=0, sigma=0.5, indpb=0.2)\n","toolbox.register(\"seleccionar\", tools.selTournament, tournsize=3)\n","\n","# Parámetros del algoritmo genético\n","tamaño_poblacion = 10\n","n_generaciones = 3\n","probabilidad_cruce = 0.7\n","probabilidad_mutacion = 0.2\n","\n","# Crear la población inicial\n","poblacion = toolbox.poblacion(n=tamaño_poblacion)\n","\n","# Evolución de la población\n","for generacion in range(n_generaciones):\n","    print(f\"\\nGeneración {generacion + 1}\")\n","\n","    # Evaluar la población\n","    fitnesses = list(map(toolbox.evaluar, poblacion))\n","    for indice, fit in enumerate(fitnesses):\n","        poblacion[indice].fitness.values = fit\n","\n","    # Mostrar población y evaluación\n","    print(\"\\nPoblación\\tFunción de Evaluación\\tFenotipo\")\n","    for individuo in poblacion:\n","        print(f\"{individuo[0]:.4f}\\t\\t{individuo.fitness.values[0]:.4e}\\t\\t{individuo}\")\n","\n","    # Selección de individuos\n","    padres = toolbox.seleccionar(poblacion, len(poblacion))\n","    print(\"\\nPadres seleccionados:\")\n","    for padre in padres:\n","        print(f\"{padre[0]:.4f} (f(x) = {padre.fitness.values[0]:.4e})\")\n","\n","    # Crear la siguiente generación\n","    siguiente_generacion = []\n","    while len(siguiente_generacion) < len(poblacion):\n","        if random.random() < probabilidad_cruce:\n","            padre1, padre2 = random.sample(padres, 2)\n","            hijo1, hijo2 = toolbox.mate(padre1, padre2)\n","            siguiente_generacion.extend([hijo1, hijo2])\n","            print(f\"\\nCruce entre: {padre1[0]:.4f} y {padre2[0]:.4f}\")\n","            print(f\"Hijos generados: {hijo1[0]:.4f} y {hijo2[0]:.4f}\")\n","        else:\n","            siguiente_generacion.append(random.choice(padres))\n","\n","    # Mutar la nueva generación\n","    for individuo in siguiente_generacion:\n","        if random.random() < probabilidad_mutacion:\n","            toolbox.mutar(individuo)\n","            print(f\"Individuo mutado: {individuo[0]:.4f}\")\n","\n","    # Actualizar la población\n","    poblacion[:] = siguiente_generacion\n","\n","# Evaluar la última generación\n","fitnesses = list(map(toolbox.evaluar, poblacion))\n","for indice, fit in enumerate(fitnesses):\n","    poblacion[indice].fitness.values = fit\n","\n","# Obtener el mejor individuo\n","mejor_individuo = max(poblacion, key=lambda ind: ind.fitness.values[0])\n","mejor_x = mejor_individuo[0]\n","mejor_fitness = mejor_individuo.fitness.values[0]\n","\n","print(f\"\\nMejor individuo: x = {mejor_x:.4f}, f(x) = {mejor_fitness:.4e}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iyMJhrhtxlx8","executionInfo":{"status":"ok","timestamp":1728217247481,"user_tz":240,"elapsed":344,"user":{"displayName":"Alakir Meneses peres","userId":"09853550789562380167"}},"outputId":"91056203-9caf-4c7d-9096-309d283f9ff5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Generación 1\n","\n","Población\tFunción de Evaluación\tFenotipo\n","1.2833\t\t8.9707e-01\t\t[1.2833446724233715]\n","0.4851\t\t-5.0434e-01\t\t[0.4850555925433644]\n","1.6444\t\t4.1339e+00\t\t[1.6444304892674342]\n","0.2015\t\t-4.7566e-01\t\t[0.20151789986968294]\n","1.6066\t\t3.5879e+00\t\t[1.6065960207270646]\n","1.0921\t\t2.1212e-01\t\t[1.0920707205091922]\n","0.1906\t\t-4.6841e-01\t\t[0.19061218291459303]\n","0.9995\t\t-9.6049e-04\t\t[0.9995194080770424]\n","1.7081\t\t5.2281e+00\t\t[1.7081350345887327]\n","0.0994\t\t-3.6807e-01\t\t[0.09940972651836888]\n","\n","Padres seleccionados:\n","1.0921 (f(x) = 2.1212e-01)\n","1.2833 (f(x) = 8.9707e-01)\n","0.2015 (f(x) = -4.7566e-01)\n","1.7081 (f(x) = 5.2281e+00)\n","1.0921 (f(x) = 2.1212e-01)\n","0.9995 (f(x) = -9.6049e-04)\n","1.6444 (f(x) = 4.1339e+00)\n","1.7081 (f(x) = 5.2281e+00)\n","1.6444 (f(x) = 4.1339e+00)\n","1.6066 (f(x) = 3.5879e+00)\n","\n","Cruce entre: 1.0188 y 0.1822\n","Hijos generados: 1.0188 y 0.1822\n","\n","Cruce entre: 1.2005 y 1.4982\n","Hijos generados: 1.2005 y 1.4982\n","\n","Cruce entre: 1.7070 y 1.1379\n","Hijos generados: 1.7070 y 1.1379\n","\n","Cruce entre: 0.9270 y 1.9179\n","Hijos generados: 0.9270 y 1.9179\n","Individuo mutado: 1.9179\n","\n","Generación 2\n","\n","Población\tFunción de Evaluación\tFenotipo\n","1.9179\t\t1.1160e+01\t\t[1.9179451499973508]\n","1.0188\t\t3.8757e-02\t\t[1.0188359703854106]\n","0.1822\t\t-4.6230e-01\t\t[0.18220133756131468]\n","1.7081\t\t5.2281e+00\t\t[1.7081350345887327]\n","0.9270\t\t-1.3114e-01\t\t[0.9269779005837427]\n","1.4982\t\t2.3577e+00\t\t[1.4981741799225976]\n","1.4982\t\t2.3577e+00\t\t[1.4981741799225976]\n","1.9179\t\t1.1160e+01\t\t[1.9179451499973508]\n","0.9270\t\t-1.3114e-01\t\t[0.9269779005837427]\n","0.9270\t\t-1.3114e-01\t\t[0.9269779005837427]\n","1.9179\t\t1.1160e+01\t\t[1.9179451499973508]\n","\n","Padres seleccionados:\n","1.9179 (f(x) = 1.1160e+01)\n","1.4982 (f(x) = 2.3577e+00)\n","1.9179 (f(x) = 1.1160e+01)\n","1.9179 (f(x) = 1.1160e+01)\n","1.9179 (f(x) = 1.1160e+01)\n","1.7081 (f(x) = 5.2281e+00)\n","1.7081 (f(x) = 5.2281e+00)\n","1.9179 (f(x) = 1.1160e+01)\n","1.7081 (f(x) = 5.2281e+00)\n","1.9179 (f(x) = 1.1160e+01)\n","0.9270 (f(x) = -1.3114e-01)\n","\n","Cruce entre: 1.9179 y 1.9179\n","Hijos generados: 1.9179 y 1.9179\n","\n","Cruce entre: 1.9179 y 1.9179\n","Hijos generados: 1.9179 y 1.9179\n","\n","Cruce entre: 2.3501 y 0.4948\n","Hijos generados: 2.3501 y 0.4948\n","\n","Cruce entre: 0.5118 y 1.4812\n","Hijos generados: 0.5118 y 1.4812\n","\n","Cruce entre: 1.4812 y 1.4812\n","Hijos generados: 1.4812 y 1.4812\n","Individuo mutado: 1.4812\n","Individuo mutado: 1.4812\n","Individuo mutado: 1.4812\n","\n","Generación 3\n","\n","Población\tFunción de Evaluación\tFenotipo\n","1.4812\t\t2.2018e+00\t\t[1.4811719121781883]\n","1.4812\t\t2.2018e+00\t\t[1.4811719121781883]\n","1.4812\t\t2.2018e+00\t\t[1.4811719121781883]\n","1.4812\t\t2.2018e+00\t\t[1.4811719121781883]\n","2.3501\t\t5.4490e+01\t\t[2.350121423400998]\n","1.4812\t\t2.2018e+00\t\t[1.4811719121781883]\n","1.4812\t\t2.2018e+00\t\t[1.4811719121781883]\n","0.5118\t\t-4.9623e-01\t\t[0.511803894924505]\n","1.4812\t\t2.2018e+00\t\t[1.4811719121781883]\n","1.4812\t\t2.2018e+00\t\t[1.4811719121781883]\n","1.4812\t\t2.2018e+00\t\t[1.4811719121781883]\n","\n","Padres seleccionados:\n","1.4812 (f(x) = 2.2018e+00)\n","1.4812 (f(x) = 2.2018e+00)\n","2.3501 (f(x) = 5.4490e+01)\n","2.3501 (f(x) = 5.4490e+01)\n","1.4812 (f(x) = 2.2018e+00)\n","2.3501 (f(x) = 5.4490e+01)\n","1.4812 (f(x) = 2.2018e+00)\n","1.4812 (f(x) = 2.2018e+00)\n","1.4812 (f(x) = 2.2018e+00)\n","1.4812 (f(x) = 2.2018e+00)\n","1.4812 (f(x) = 2.2018e+00)\n","\n","Cruce entre: 2.3501 y 2.3501\n","Hijos generados: 2.3501 y 2.3501\n","\n","Cruce entre: 1.9445 y 1.8868\n","Hijos generados: 1.9445 y 1.8868\n","\n","Cruce entre: 1.9048 y 1.9265\n","Hijos generados: 1.9048 y 1.9265\n","\n","Cruce entre: 1.9048 y 1.9048\n","Hijos generados: 1.9048 y 1.9048\n","\n","Cruce entre: 1.9048 y 1.9048\n","Hijos generados: 1.9048 y 1.9048\n","Individuo mutado: 1.9265\n","Individuo mutado: 1.9048\n","\n","Mejor individuo: x = 1.9265, f(x) = 1.1510e+01\n"]}]},{"cell_type":"markdown","source":["# Analisis e Interpretacion\n","\n","# Generación 1\n","\n","**Población:** Se evalúan 10 individuos con diferentes funciones de evaluación. La función de evaluación indica el desempeño de cada individuo.\n","\n","**Mejores individuos:** Los individuos con mejor desempeño tienen valores de evaluación positivos, destacando el individuo con el valor 1.7081 (f(x) = 5.2281) y 1.6444 (f(x) = 4.1339).\n","\n","**Selección de padres:** Se seleccionan varios individuos con buenos resultados para cruzar. Algunos se repiten, indicando que son consistentes en su desempeño.\n","**Cruces:** Se generan nuevos individuos a partir de cruces entre los padres seleccionados. Se observa un individuo mutado con valor 1.9179.\n","\n","# Generación 2\n","\n","**Población:** Nuevamente, se evalúan 10 individuos, algunos de los cuales son resultado de los cruces de la generación anterior.\n","\n","**Mejores individuos:**  El individuo 1.9179 (f(x) = 1.1160e+01) destaca como el mejor, seguido de 1.4982 (f(x) = 2.3577).\n","\n","**Cruces:** Se cruzan los individuos seleccionados, generando nuevos individuos, y se realizan mutaciones.\n","\n","# Generación 3\n","**Población:** Se evalúan nuevamente 10 individuos, donde la mayoría son del mejor individuo de la generación anterior.\n","\n","**Mejor individuo:** Se identifica x = 1.9265 (f(x) = 1.1510e+01) como el mejor de esta generación.\n","\n","**Cruces y mutaciones:** Se realizan varios cruces y mutaciones, manteniendo la diversidad en la población."],"metadata":{"id":"M9Fjyk0yzgB0"}}]}